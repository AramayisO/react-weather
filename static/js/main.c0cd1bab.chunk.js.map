{"version":3,"sources":["util/utils.js","components/WeatherIcon.js","components/WeatherDetails.js","components/Temperature.js","components/WeatherSummary.js","components/FiveDayForecast.js","components/SearchBar.js","components/App.js","reportWebVitals.js","index.js"],"names":["getWeatherData","latitude","longitude","a","units","apiKey","process","url","fetch","response","json","current","daily","millisecondsToDayOfWeek","milliseconds","Date","getDay","WeatherIcon","iconId","src","alt","WeatherDetails","props","className","location","dayOfWeek","weatherCondition","icon","currentTemp","highTemp","lowTemp","precipitation","humidity","windSpeed","Temperature","temp","WeatherSummary","isActive","index","onSelected","onClick","FiveDayForecast","forecast","activeDay","onActiveDayChanged","slice","map","weatherData","Math","round","SearchBar","state","handleSubmit","bind","event","preventDefault","this","onSubmit","setState","type","placeholder","value","onChange","e","target","React","Component","App","isLoading","weather","error","handleActiveDayChange","newLocationSearched","navigator","geolocation","getCurrentPosition","position","coords","newActiveDay","console","log","content","dt","description","min","max","pop","wind_speed","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0cd1bab.chunk.js","sourcesContent":["export const getCoordinates = async (location) => {\r\n    const apiKey = process.env.REACT_APP_MAP_QUEST_API_KEY;\r\n    const apiUrl = 'http://www.mapquestapi.com/geocoding/v1/address';\r\n    const response = await fetch(`${apiUrl}?key=${apiKey}&location=${location}`)\r\n    const data = await response.json();\r\n    return data.results[0].locations[0].latLng;\r\n};\r\n\r\nexport const getWeatherData = async (latitude, longitude, units='imperial') => {\r\n    const apiUrl = 'https://api.openweathermap.org/data/2.5/onecall';\r\n    const apiKey = process.env.REACT_APP_OPEN_WEATHER_MAP_API_KEY;\r\n    const url = `${apiUrl}?lat=${latitude}&lon=${longitude}&units=${units}&appid=${apiKey}`;\r\n    const response = await fetch(url);\r\n    // There's a lot of data in the returned object, but we'll only need\r\n    // the current weather and the daily 7 day forecast for the project.\r\n    const { current, daily } = await response.json();\r\n    return { current, daily };\r\n};\r\n\r\n\r\nexport const millisecondsToDayOfWeek = (milliseconds) => {\r\n    const dow = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    const date = new Date(milliseconds);\r\n    return dow[date.getDay()];\r\n}","const WeatherIcon = ({ iconId }) => {\r\n    const url = `http://openweathermap.org/img/wn/${iconId}@2x.png`\r\n    return (\r\n        <img src={url} alt=\"weather icon\" />\r\n    )\r\n}\r\n\r\nexport default WeatherIcon;","import PropTypes from 'prop-types';\r\nimport WeatherIcon from './WeatherIcon';\r\n\r\nconst WeatherDetails = (props) => {\r\n    return (\r\n        <div className=\"WeatherDetails\">\r\n            <p className=\"text_large\">{props.location}</p>\r\n            <p>{props.dayOfWeek}</p>\r\n            <p>{props.weatherCondition}</p>\r\n            <div className=\"details_wrapper\">\r\n                <div className=\"icon_and_current\">\r\n                    <WeatherIcon iconId={props.icon} />\r\n                    <span className=\"text_large\">{props.currentTemp}</span>\r\n                    <span>&deg;F</span>\r\n                    <span>|</span>\r\n                    <span>&deg;C</span>\r\n                </div>\r\n                <div>\r\n                    <p>High: {props.highTemp}&deg;</p>\r\n                    <p>Low: {props.lowTemp}&deg;</p>\r\n                    <p>Precipitation: {props.precipitation}%</p>\r\n                    <p>Humidity: {props.humidity}%</p>\r\n                    <p>Wind: {props.windSpeed} {props.units === 'imperial' ? 'mph' : 'km/h'}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nWeatherDetails.propTypes = {\r\n    location: PropTypes.string.isRequired,\r\n    dayOfWeek: PropTypes.string.isRequired,\r\n    weatherCondition: PropTypes.string.isRequired,\r\n    icon: PropTypes.string.isRequired,\r\n    units: PropTypes.oneOf(['imperial', 'metric']),\r\n    currentTemp: PropTypes.number,\r\n    lowTemp: PropTypes.number.isRequired,\r\n    highTemp: PropTypes.number.isRequired,\r\n    precipitation: PropTypes.number.isRequired, \r\n    humidity: PropTypes.number.isRequired, \r\n    windSpeed: PropTypes.number.isRequired, \r\n}\r\n\r\nexport default WeatherDetails;","import PropTypes from 'prop-types';\r\n\r\nconst Temperature = ({ temp }) => <span>{temp}&deg;</span>;\r\n\r\nTemperature.propTypes = {\r\n    temp: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Temperature;","import PropTypes from \"prop-types\";\r\nimport Temperature from \"./Temperature\";\r\nimport WeatherIcon from './WeatherIcon';\r\n\r\nconst WeatherSummary = ({ dayOfWeek, icon, highTemp, lowTemp, isActive, index, onSelected }) => (\r\n  <div \r\n    className={`WeatherSummary ${isActive ? \"WeatherSummary-active\" : \"\"}`}\r\n    onClick={() => onSelected(index)}\r\n  >\r\n    <p>{dayOfWeek}</p>\r\n    <WeatherIcon iconId={icon} />\r\n    <div className=\"WeatherSummary-temps\">\r\n      <Temperature temp={highTemp} />\r\n      <Temperature temp={lowTemp} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nWeatherSummary.propTypes = {\r\n    dayOfWeek: PropTypes.string.isRequired,\r\n    icon: PropTypes.string.isRequired,\r\n    highTemp: PropTypes.number.isRequired,\r\n    lowTemp: PropTypes.number.isRequired \r\n};\r\n  \r\n\r\nexport default WeatherSummary;","import { checkPropTypes } from 'prop-types';\r\nimport WeatherSummary from './WeatherSummary';\r\n\r\nconst FiveDayForecast = ({ forecast, activeDay, onActiveDayChanged }) => {\r\n\r\n    return (\r\n        <div>\r\n            {forecast.slice(0, 5).map((weatherData, index) =>\r\n                <WeatherSummary\r\n                    key={index}\r\n                    dayOfWeek={weatherData.dayOfWeek}\r\n                    index={index}\r\n                    icon={weatherData.icon}\r\n                    highTemp={Math.round(weatherData.highTemp)}\r\n                    lowTemp={Math.round(weatherData.lowTemp)}\r\n                    isActive={index === activeDay}\r\n                    onSelected={onActiveDayChanged}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default FiveDayForecast;","import React from 'react';\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            location: ''\r\n        }\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.props.onSubmit(this.state.location);\r\n        this.setState({ location: ''});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input \r\n                    type=\"text\" \r\n                    placeholder=\"Search city name\"\r\n                    value={this.state.location}   \r\n                    onChange={(e) => this.setState({ location: e.target.value })} \r\n                />\r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\nimport { getWeatherData, millisecondsToDayOfWeek } from '../util/utils';\nimport WeatherDetails from './WeatherDetails';\nimport FiveDayForecast from './FiveDayForecast';\nimport SearchBar from './SearchBar';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      weather: null,\n      error: null,\n      activeDay: 0\n    };\n\n    this.handleActiveDayChange = this.handleActiveDayChange.bind(this)\n    this.newLocationSearched = this.newLocationSearched.bind(this);\n  }\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        const { latitude, longitude } = position.coords;\n\n        try {\n          // If we successfully get data from the weather API, then we\n          // update our state with the new data that we got.\n          const weatherData = await getWeatherData(latitude, longitude);\n          this.setState({\n            weather: weatherData,\n            isLoading: false,\n          });\n        } catch(error) {\n          // If there's a problem getting data from the API, we want to inform\n          // the user that there was an error.\n          this.setState({\n            error: 'Oh no 😔 We were unable to get weather data at this time.',\n            isLoading: false\n          });\n        }\n\n      },\n      (error) => {\n        // If there's an error when we try to get the users current location,\n        // for example if the user blocks location services, then we want to\n        // show the user an error message.\n        this.setState({\n          error: 'Ooops 😓 We were unable to get your current location.',\n          isLoading: false\n        })\n      }\n    )\n  }\n\n  handleActiveDayChange(newActiveDay) {\n    this.setState({\n      activeDay: newActiveDay\n    })\n  }\n\n  newLocationSearched(location) {\n    console.log(`You searched for ${location}`);\n  }\n\n  render() {\n\n    const { isLoading, weather, error, activeDay } = this.state;\n\n    // Instead of doing nested ternary statements, I pulled this section out\n    // into a variable to make the code a little bit easier to read. The\n    // 'contets' variable just stores some JSX, and we can tell React to render\n    // that JSX by putting the variable in curly braces.\n    const content = (\n      <>\n        {error\n          ? <p>{error}</p>\n          : weather &&\n            <>\n              <SearchBar onSubmit={this.newLocationSearched} />\n              <WeatherDetails\n                  location=\"Current Location\"\n                  dayOfWeek={millisecondsToDayOfWeek(weather.daily[activeDay].dt * 1000)}\n                  weatherCondition={weather.daily[activeDay].weather[0].description}\n                  icon={weather.daily[activeDay].weather[0].icon}\n                  units=\"imperial\"\n                  currentTemp={weather.current.temp}\n                  lowTemp={weather.daily[activeDay].temp.min}\n                  highTemp={weather.daily[activeDay].temp.max}\n                  precipitation={weather.daily[activeDay].pop * 100} \n                  humidity={weather.daily[activeDay].humidity} \n                  windSpeed={weather.daily[activeDay].wind_speed}\n              />\n              <FiveDayForecast \n                forecast={\n                  weather.daily.map(data => {\n                    return {\n                      dayOfWeek: millisecondsToDayOfWeek(data.dt * 1000),\n                      icon: data.weather[0].icon,\n                      highTemp: data.temp.max,\n                      lowTemp: data.temp.min,\n                    }                \n                  })\n                }\n                activeDay={activeDay}\n                onActiveDayChanged={this.handleActiveDayChange}\n              />\n              {/* {weather.daily.map((data, index) => (\n                <WeatherSummary\n                  key={data.dt}\n                  dayOfWeek='monday'\n                  icon={`https://picsum.photos/id/${index}/200/200`}\n                  highTemp={data.temp.max}\n                  lowTemp={data.temp.min}/>\n              ))} */}\n            </>\n        }\n      </>\n    )\n\n    return (\n      <div>\n        {isLoading\n          ? <p>Loading...⏳</p>\n          : <>{content}</>\n        }\n      </div>\n    )\n  }\n\n};\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}